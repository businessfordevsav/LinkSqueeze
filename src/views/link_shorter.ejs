<!DOCTYPE html>
<html lang="en" data-theme="light">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      name="description"
      content="LinkSqueeze URL shortener with detailed analytics"
    />
    <meta name="author" content="businessfordevsav" />
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon" />
    <title>LinkSqueeze</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <style>
      :root {
        --primary: #3b82f6;
        --primary-dark: #2563eb;
        --primary-light: #93c5fd;
        --secondary: #64748b;
        --background: #f8fafc;
        --card-bg: #ffffff;
        --text: #1e293b;
        --text-light: #64748b;
        --border: #e2e8f0;
        --success: #10b981;
        --warning: #f59e0b;
        --danger: #ef4444;
        --dark: #0f172a;
        --transition-speed: 0.3s;
      }

      [data-theme="dark"] {
        --primary: #60a5fa;
        --primary-dark: #3b82f6;
        --primary-light: #93c5fd;
        --secondary: #94a3b8;
        --background: #0f172a;
        --card-bg: #1e293b;
        --text: #f1f5f9;
        --text-light: #cbd5e1;
        --border: #334155;
        --success: #34d399;
        --warning: #fbbf24;
        --danger: #f87171;
        --dark: #e2e8f0;
      }

      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
        background: var(--background);
        color: var(--text);
        line-height: 1.6;
        min-height: 100vh;
        transition: background-color var(--transition-speed) ease,
          color var(--transition-speed) ease;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1rem;
        width: 100%;
      }

      /* Header and Navigation Styles */
      .header {
        background-color: var(--card-bg);
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        padding: 1rem 0;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        z-index: 100;
        transition: background-color var(--transition-speed) ease;
      }

      .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .logo {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--primary);
        text-decoration: none;
      }

      .nav-links {
        display: flex;
        align-items: center;
        gap: 1.5rem;
      }

      .nav-link {
        color: var(--text);
        text-decoration: none;
        font-weight: 500;
        transition: color var(--transition-speed) ease;
      }

      .nav-link:hover {
        color: var(--primary);
      }

      .user-menu {
        position: relative;
      }

      .user-trigger {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 0.375rem;
        transition: background-color var(--transition-speed) ease;
      }

      .user-trigger:hover {
        background-color: var(--background);
      }

      .user-trigger img {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
      }

      .user-dropdown {
        position: absolute;
        top: 100%;
        right: 0;
        background-color: var(--card-bg);
        border-radius: 0.375rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
        width: 200px;
        overflow: hidden;
        opacity: 0;
        transform: translateY(10px);
        visibility: hidden;
        transition: all var(--transition-speed) ease;
        z-index: 101;
      }

      .user-dropdown.visible {
        opacity: 1;
        transform: translateY(0);
        visibility: visible;
      }

      .dropdown-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem 1rem;
        color: var(--text);
        text-decoration: none;
        transition: background-color var(--transition-speed) ease;
      }

      .dropdown-item:hover {
        background-color: var(--background);
      }

      .dropdown-divider {
        height: 1px;
        background-color: var(--border);
        margin: 0.5rem 0;
      }

      /* Existing theme toggle styles */
      @media (max-width: 768px) {
        body {
          padding: 1rem 0.5rem;
        }
        
        .container {
          padding: 0 0.5rem;
        }
      }
      
      @media (max-width: 480px) {
        body {
          padding: 0.5rem 0.25rem;
        }

        .header {
          padding: 1rem 0;
        }
        
        .header h1 {
          font-size: 1.8rem;
        }
        
        .header p {
          font-size: 0.9rem;
        }

        .stat {
          font-size: 1.2rem;
        }

        .table-container {
          margin: 0 -1rem;
          width: calc(100% + 2rem);
          border-radius: 0;
        }
        
        /* Improve card padding on small screens */
        .card {
          padding: 1rem 0.75rem;
        }
        
        /* Make URL cards more compact */
        .url-card {
          padding: 0.75rem 0.5rem;
        }
        
        /* Better handling of action buttons on mobile */
        .action-btn {
          font-size: 0.9rem;
          padding: 0.5rem 0.75rem;
        }
        
        /* Toast positioning for mobile */
        .toast {
          bottom: 10px;
          right: 10px;
          left: 10px;
          width: calc(100% - 20px);
          text-align: center;
        }
      }


      .theme-toggle {
        position: absolute;
        top: 0;
        right: 0;
        background: transparent;
        border: none;
        font-size: 1.5rem;
        color: var(--text);
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        transition: all var(--transition-speed) ease;
      }

      .theme-toggle:hover {
        background-color: rgba(0, 0, 0, 0.1);
        transform: rotate(15deg);
      }

      [data-theme="dark"] .theme-toggle .fa-moon {
        display: none;
      }

      [data-theme="dark"] .theme-toggle .fa-sun {
        display: inline-block;
      }

      [data-theme="light"] .theme-toggle .fa-moon {
        display: inline-block;
      }

      [data-theme="light"] .theme-toggle .fa-sun {
        display: none;
      }

      .card {
        background: var(--card-bg);
        border-radius: 1rem;
        padding: 1.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform var(--transition-speed) ease,
          box-shadow var(--transition-speed) ease,
          background-color var(--transition-speed) ease;
      }

      .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
      }

      .form-group {
        margin-bottom: 1rem;
      }

      input[type="url"],
      input[type="text"],
      input[type="date"] {
        width: 100%;
        padding: 0.8rem;
        border: 2px solid var(--border);
        border-radius: 0.5rem;
        font-size: 1rem;
        background-color: var(--card-bg);
        color: var(--text);
        transition: border-color var(--transition-speed) ease,
          box-shadow var(--transition-speed) ease,
          background-color var(--transition-speed) ease,
          color var(--transition-speed) ease;
      }

      input:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
      }

      button {
        width: 100%;
        background: var(--primary);
        color: white;
        padding: 0.8rem;
        border: none;
        border-radius: 0.5rem;
        cursor: pointer;
        font-weight: 600;
        transition: background-color var(--transition-speed) ease,
          transform var(--transition-speed) ease,
          box-shadow var (--transition-speed) ease;
        position: relative;
        overflow: hidden;
      }

      button:hover {
        background: var(--primary-dark);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }

      button:active {
        transform: translateY(0);
      }

      button::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        width: 5px;
        height: 5px;
        background: rgba(255, 255, 255, 0.5);
        opacity: 0;
        border-radius: 100%;
        transform: scale(1, 1) translate(-50%);
        transform-origin: 50% 50%;
      }

      @keyframes ripple {
        0% {
          transform: scale(0, 0);
          opacity: 0.5;
        }
        100% {
          transform: scale(100, 100);
          opacity: 0;
        }
      }

      button:focus:not(:active)::after {
        animation: ripple 1s ease-out;
      }

      .short-url-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 1rem;
      }

      .short-url-input {
        flex-grow: 1;
        padding: 0.8rem;
        border: 2px solid var(--border);
        border-radius: 0.5rem;
        background: var(--background);
        text-align: center;
        color: var(--text);
        transition: background-color var(--transition-speed) ease,
          color var (--transition-speed) ease;
      }

      .analytics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1rem;
        margin: 1.5rem 0;
      }

      .analytic-card {
        background: var(--card-bg);
        padding: 1rem;
        border-radius: 0.8rem;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: transform var(--transition-speed) ease,
          background-color var(--transition-speed) ease;
      }

      .analytic-card:hover {
        transform: translateY(-3px);
      }

      .stat {
        font-size: 1.5rem;
        font-weight: bold;
        margin-top: 0.5rem;
        color: var(--primary);
        transition: color var(--transition-speed) ease;
      }

      .table-container {
        overflow-x: auto;
        border-radius: 0.8rem;
        transition: background-color var(--transition-speed) ease;
      }

      .click-history-table {
        width: 100%;
        border-collapse: collapse;
        background: var (--card-bg);
        border-radius: 0.8rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        min-width: 600px;
        transition: background-color var(--transition-speed) ease;
      }

      .click-history-table th,
      .click-history-table td {
        padding: 0.8rem;
        text-align: left;
        border-bottom: 1px solid var(--border);
        font-size: 0.9rem;
        transition: border-color var(--transition-speed) ease;
      }

      .click-history-table th {
        background: var(--background);
        font-weight: 600;
        transition: background-color var(--transition-speed) ease;
      }
      
      /* Responsive table for mobile devices */
      @media (max-width: 768px) {
        .table-container {
          overflow-x: auto;
          -webkit-overflow-scrolling: touch;
          margin: 0 -1rem;
          padding: 0 1rem;
        }
        
        .click-history-table {
          width: 100%;
          min-width: 500px;
        }
      }
      
      @media (max-width: 480px) {
        .click-history-table th,
        .click-history-table td {
          padding: 0.6rem 0.5rem;
          font-size: 0.8rem;
        }
        
        .click-history-table {
          min-width: 450px;
        }
        
        .device-icon, .platform-icon, .browser-icon {
          display: block;
          font-size: 1.2rem;
          margin-bottom: 0.2rem;
        }
      }

      .toast {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: var(--primary);
        color: white;
        padding: 0.8rem;
        border-radius: 0.5rem;
        display: none;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        animation: slideIn 0.3s ease forwards;
      }

      @keyframes slideIn {
        from {
          transform: translateY(30px);
          opacity: 0;
        }
        to {
          transform: translateY(0);
          opacity: 1;
        }
      }

      @keyframes slideOut {
        from {
          transform: translateY(0);
          opacity: 1;
        }
        to {
          transform: translateY(30px);
          opacity: 0;
        }
      }

      .toast.hiding {
        animation: slideOut 0.3s ease forwards;
      }

      .url-history {
        margin-top: 2rem;
      }

      .url-card {
        background: var(--card-bg);
        padding: 1rem;
        border-radius: 0.8rem;
        margin-bottom: 1rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: transform var(--transition-speed) ease,
          box-shadow var(--transition-speed) ease,
          background-color var(--transition-speed) ease;
      }

      .url-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
      }

      .url-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        margin-bottom: 1rem;
      }

      .url-header h3 {
        margin-bottom: 0.5rem;
      }

      .qr-code-preview {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 1rem 0;
        overflow: hidden;
        max-height: 0;
        transition: max-height 0.5s ease;
      }

      .qr-code-preview.visible {
        max-height: 200px;
      }

      .qr-code-preview img {
        max-width: 150px;
        transition: transform var(--transition-speed) ease;
      }

      .qr-code-preview img:hover {
        transform: scale(1.1);
      }

      .action-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        padding: 0.6rem 1rem;
        border-radius: 0.5rem;
        font-weight: 500;
        transition: all var(--transition-speed) ease;
      }

      .action-btn-group {
        display: flex;
        gap: 0.5rem;
      }

      .action-btn-success {
        background-color: var(--success);
      }

      .action-btn-primary {
        background-color: var(--primary);
      }

      .action-btn-secondary {
        background-color: var(--secondary);
      }

      @media (max-width: 768px) {
        body {
          padding: 1rem 0.5rem;
        }
        
        .container {
          padding: 0 0.5rem;
        }

        .header {
          margin-bottom: 1.5rem;
        }

        .card {
          padding: 1rem;
        }

        .short-url-container {
          flex-direction: column;
        }

        .action-btn-group {
          flex-direction: column;
          width: 100%;
        }
        
        .action-btn {
          width: 100%;
          justify-content: center;
          margin-top: 0.5rem;
        }

        .analytics-grid {
          grid-template-columns: 1fr;
        }

        .url-header {
          flex-direction: column;
          align-items: flex-start;
        }
        
        .url-card {
          padding: 0.75rem;
        }
      }

      @media (max-width: 480px) {
        body {
          padding: 0.5rem 0.25rem;
        }

        .header {
          padding: 1rem 0;
        }
        
        .header h1 {
          font-size: 1.8rem;
        }
        
        .header p {
          font-size: 0.9rem;
        }

        .stat {
          font-size: 1.2rem;
        }

        .table-container {
          margin: 0 -1rem;
          width: calc(100% + 2rem);
          border-radius: 0;
        }
        
        /* Improve card padding on small screens */
        .card {
          padding: 1rem 0.75rem;
        }
        
        /* Make URL cards more compact */
        .url-card {
          padding: 0.75rem 0.5rem;
        }
        
        /* Better handling of action buttons on mobile */
        .action-btn {
          font-size: 0.9rem;
          padding: 0.5rem 0.75rem;
        }
        
        /* Toast positioning for mobile */
        .toast {
          bottom: 10px;
          right: 10px;
          left: 10px;
          width: calc(100% - 20px);
          text-align: center;
        }
      }

      /* Advanced responsive and interactive features */
      .shimmer {
        background: linear-gradient(
          90deg,
          var(--card-bg) 0%,
          var(--border) 50%,
          var(--card-bg) 100%
        );
        background-size: 200% 100%;
        animation: shimmer 2s infinite;
        border-radius: 0.5rem;
      }

      @keyframes shimmer {
        0% {
          background-position: 200% 0;
        }
        100% {
          background-position: -200% 0;
        }
      }

      .loading-row td {
        height: 30px;
      }

      .loading-row td:nth-child(1) {
        width: 25%;
      }

      .loading-row td:nth-child(2) {
        width: 15%;
      }

      .loading-row td:nth-child(3) {
        width: 15%;
      }

      .loading-row td:nth-child(4) {
        width: 20%;
      }

      .loading-row td:nth-child(5) {
        width: 25%;
      }

      .expandable-section {
        overflow: hidden;
        max-height: 0;
        opacity: 0;
        transition: max-height 0.5s ease-out, opacity 0.3s ease-in-out, padding 0.3s ease;
        margin: 0;
        padding: 0;
      }

      .expanded {
        max-height: 2000px;
        opacity: 1;
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
      }

      .toggle-btn {
        background: transparent;
        color: var(--primary);
        font-weight: 500;
        padding: 0.5rem;
        width: auto;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: none;
      }

      .toggle-btn:hover {
        background: transparent;
        color: var(--primary-dark);
        box-shadow: none;
      }

      .toggle-btn i {
        transition: transform 0.3s ease;
      }

      .toggle-btn.active i {
        transform: rotate(360deg);
      }

      .copy-animation {
        animation: pulse 0.5s ease-in-out;
      }

      @keyframes pulse {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.05);
        }
        100% {
          transform: scale(1);
        }
      }

      .qr-code-preview-fullscreen {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.9);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2000;
      }
      
      .qr-code-preview-fullscreen img {
        max-width: 80%;
        max-height: 80%;
        border: 3px solid white;
        border-radius: 10px;
      }
      
      .qr-code-preview-fullscreen .close-btn {
        position: absolute;
        top: 20px;
        right: 20px;
        background: transparent;
        color: white;
        border: none;
        font-size: 24px;
        cursor: pointer;
        width: auto;
        height: auto;
      }
      
      @media (max-width: 480px) {
        .qr-code-preview-fullscreen img {
          max-width: 90%;
          max-height: 90%;
        }
        
        .qr-code-preview-fullscreen .close-btn {
          top: 10px;
          right: 10px;
          font-size: 20px;
        }
      }

      @keyframes fadeOut {
        from {
          opacity: 1;
          transform: translateY(0);
        }
        to {
          opacity: 0;
          transform: translateY(10px);
        }
      }

      /* Mobile-specific modal improvements */
      @media (max-width: 768px) {
        /* Better modal UX for mobile */
        .modal-container {
          width: 95% !important;
          max-width: 450px;
          overflow-y: auto;
          max-height: 85vh;
        }
        
        /* Improve form field spacing on mobile */
        .form-group {
          margin-bottom: 0.75rem;
        }
        
        /* Better color picker controls for mobile */
        input[type="color"] {
          height: 35px !important;
        }
        
        /* Better modals for smaller screens */
        .modal-overlay {
          padding: 15px;
        }
        
        /* Improve toggle buttons on mobile */
        .toggle-btn {
          font-size: 0.85rem;
          padding: 0.3rem;
        }
        
        /* Fix touch targets */
        button, 
        input[type="checkbox"], 
        .action-btn {
          min-height: 44px; /* Apple recommended touch target size */
        }
      }
      
      @media (max-width: 480px) {
        /* More compact design for very small screens */
        .modal-container {
          padding: 1rem 0.75rem !important;
        }
        
        /* Better support for modals on small screens */
        #editOverlayOptions div[style*="display: flex"] {
          flex-direction: column;
        }
        
        #editOverlayOptions div[style*="display: flex"] > div {
          flex: unset !important;
          width: 100%;
        }
      }

      /* For webkit browsers to style the date picker */
      input[type="date"]::-webkit-calendar-picker-indicator {
        filter: var(--calendar-icon-filter);
        cursor: pointer;
      }

      [data-theme="dark"] {
        --calendar-icon-filter: invert(1);
      }

      [data-theme="light"] {
        --calendar-icon-filter: none;
      }
    </style>
    <script src="/js/qr-code-helpers.js" defer></script>
  </head>
  <body>
    <div class="container">
      <!-- Replace the simple header with the standard header structure -->
      <header class="header">
        <div class="container header-content">
          <a href="/" class="logo">
            <i class="fas fa-link"></i> LinkSqueeze
          </a>
          <div class="nav-links">
            <a href="/" class="nav-link">Home</a>
            <a href="/dashboard" class="nav-link">Dashboard</a>
            <a href="/linksqueeze" class="nav-link">Create Link</a>

            <% if (isAuthenticated) { %>
            <div class="user-menu">
              <div class="user-trigger" id="userMenuTrigger">
                <img src="<%= user.profileImageUrl %>" alt="User profile" />
                <span><%= user.name.split(' ')[0] %></span>
                <i class="fas fa-chevron-down"></i>
              </div>
              <div class="user-dropdown" id="userDropdown">
                <a href="/profile" class="dropdown-item">
                  <i class="fas fa-user"></i>
                  Profile
                </a>
                <a href="/dashboard" class="dropdown-item">
                  <i class="fas fa-link"></i>
                  My Links
                </a>
                <div class="dropdown-divider"></div>
                <a href="#" class="dropdown-item" id="themeToggleMenu">
                  <i class="fas fa-moon theme-moon"></i>
                  <i class="fas fa-sun theme-sun"></i>
                  Toggle Theme
                </a>
                <div class="dropdown-divider"></div>
                <a href="/logout" class="dropdown-item">
                  <i class="fas fa-sign-out-alt"></i>
                  Logout
                </a>
              </div>
            </div>
            <% } else { %>
            <a href="/login" class="nav-link">Login</a>
            <a href="/register" class="nav-link">Register</a>
            <% } %>
          </div>
        </div>
      </header>

      <div style="margin-top: 5rem; text-align: center; padding: 1rem 0;">
        <h1>🔗 LinkSqueeze URL Shortener</h1>
        <p>Create short links with detailed analytics</p>
      </div>

      <main class="card">
        <form action="/linksqueeze" method="POST" id="shortenForm">
          <!-- CSRF token input removed -->
          
          <div class="form-group">
            <input
              type="url"
              name="originalUrl"
              placeholder="https://example.com/long-url"
              required
              id="originalUrl"
            />
          </div>
          <div class="form-group">
            <input
              type="text"
              name="customName"
              placeholder="Custom name (optional)"
              maxlength="50"
              id="customName"
            />
          </div>
          <div class="form-group expandable-section" id="advancedOptions">
            <div class="form-group">
              <input
                type="date"
                name="expirationDate"
                id="expirationDate"
                min="<%= new Date().toISOString().split('T')[0] %>"
                placeholder="Expiration date (optional)"
              />
            </div>

            <!-- QR Code Ad Mode option -->
            <div class="form-group">
              <label
                for="adModeEnabled"
                style="
                  display: flex;
                  align-items: center;
                  gap: 0.5rem;
                  cursor: pointer;
                  margin-bottom: 0.75rem;
                "
              >
                <input
                  type="checkbox"
                  id="adModeEnabled"
                  name="adModeEnabled"
                  style="width: auto; cursor: pointer"
                />
                Enable QR code ad mode with app icon
              </label>

              <div
                class="expandable-section"
                id="adModeOptions"
                style="margin-left: 1.5rem; margin-bottom: 1rem"
              >
                <div class="form-group">
                  <label
                    for="iconSizePercent"
                    style="
                      display: block;
                      margin-bottom: 0.25rem;
                      font-size: 0.9rem;
                      color: var(--text-light);
                    "
                  >
                    Icon Size (% of QR code)
                  </label>
                  <input
                    type="range"
                    id="iconSizePercent"
                    name="iconSizePercent"
                    min="10"
                    max="30"
                    value="20"
                    style="width: 100%"
                    oninput="document.getElementById('iconSizeValue').textContent = this.value + '%'"
                  />
                  <small
                    id="iconSizeValue"
                    style="
                      display: block;
                      text-align: center;
                      margin-top: 0.25rem;
                      color: var(--text-light);
                    "
                    >20%</small
                  >
                </div>
                <div class="form-group" style="margin-top: 0.5rem">
                  <label
                    for="useLargeIcon"
                    style="
                      display: flex;
                      align-items: center;
                      gap: 0.5rem;
                      cursor: pointer;
                    "
                  >
                    <input
                      type="checkbox"
                      id="useLargeIcon"
                      name="useLargeIcon"
                      style="width: auto; cursor: pointer"
                    />
                    Use larger icon
                  </label>
                </div>
              </div>
            </div>

            <div class="form-group">
              <label
                for="customOverlayEnabled"
                style="
                  display: flex;
                  align-items: center;
                  gap: 0.5rem;
                  cursor: pointer;
                "
              >
                <input
                  type="checkbox"
                  id="customOverlayEnabled"
                  name="customOverlayEnabled"
                  style="width: auto; cursor: pointer"
                />
                Enable custom overlay page
              </label>
            </div>
            <div class="form-group expandable-section" id="overlayOptions">
              <input
                type="text"
                name="overlayText"
                placeholder="Overlay message"
                id="overlayText"
              />
              <div style="display: flex; gap: 0.5rem; margin-top: 0.5rem">
                <input
                  type="text"
                  name="buttonText"
                  placeholder="Button text"
                  id="buttonText"
                  style="flex: 1"
                />
                <input
                  type="url"
                  name="buttonUrl"
                  placeholder="Button URL"
                  id="buttonUrl"
                  style="flex: 2"
                />
              </div>
            </div>
          </div>
          <div style="text-align: right; margin-bottom: 1rem">
            <button type="button" class="toggle-btn" id="advancedToggle">
              Advanced options <i class="fas fa-chevron-down"></i>
            </button>
          </div>
          <button type="submit" id="submitBtn">Shorten URL</button>
        </form>
      </main>

      <!-- <% if (typeof urls !== 'undefined' && urls.length > 0) { %>
      <section class="url-history">
        <h2>📚 Your Recent Shortened URLs</h2>
        <% urls.forEach(url => { %> <% if (typeof url.shortId !== 'undefined') {
        %>
        <div
          class="url-card"
          data-id="<%= url.shortId %>"
          data-name="<%= url.name || '' %>"
          data-expires="<%= url.expiresAt ? url.expiresAt.toISOString() : '' %>"
          data-active="<%= url.isActive %>"
          data-has-overlay="<%= url.customOverlay && url.customOverlay.enabled %>"
          <% if (url.customOverlay && url.customOverlay.enabled) { %>
          data-overlay-text="<%= url.customOverlay.text || '' %>"
          data-button-text="<%= url.customOverlay.buttonText || '' %>"
          data-button-url="<%= url.customOverlay.buttonUrl || '' %>"
          data-bg-color="<%= url.customOverlay.backgroundColor || 'rgba(0, 0, 0, 0.7)' %>" 
          data-text-color="<%= url.customOverlay.textColor || '#ffffff' %>" 
          data-button-color="<%= url.customOverlay.buttonColor || '#3498db' %>"
          <% } %> >
          <div class="url-header">
            <div>
              <h3><%= url.name || 'Untitled Link' %></h3>
              <small>
                Created: <%= url.createdAt.toLocaleDateString() %> <% if
                (url.expiresAt) { %> | Expires: <%=
                url.expiresAt.toLocaleDateString() %> <% } %>
              </small>
            </div>
            <div style="display: flex; align-items: center; gap: 0.75rem">
              <span
                class="badge"
                style="background-color: <%= url.isActive ? 'var(--success)' : 'var(--secondary)' %>; color: white; padding: 0.25rem 0.5rem; border-radius: 1rem; font-size: 0.8rem;"
              >
                <%= url.isActive ? 'Active' : 'Inactive' %>
              </span>

              <div class="action-buttons" style="display: flex; gap: 0.5rem">
                <button
                  onclick="openEditModal('<%= url.shortId %>')"
                  style="
                    width: auto;
                    height: auto;
                    padding: 0.3rem;
                    background: transparent;
                    color: var(--primary);
                    box-shadow: none;
                  "
                  title="Edit URL"
                >
                  <i class="fas fa-edit"></i>
                </button>

                <button
                  onclick="openDeleteModal('<%= url.shortId %>')"
                  style="
                    width: auto;
                    height: auto;
                    padding: 0.3rem;
                    background: transparent;
                    color: var(--danger);
                    box-shadow: none;
                  "
                  title="Delete URL"
                >
                  <i class="fas fa-trash-alt"></i>
                </button>
              </div>
            </div>
          </div>
          <div class="short-url-container">
            <input
              type="text"
              value="<%= baseUrl %>/url/<%= url.shortId %>"
              readonly
              class="short-url-input"
              id="shortUrlInput-<%= url.shortId %>"
              data-redirect="<%= url.redirectUrl %>"
            />
            <div class="action-btn-group">
              <button
                class="action-btn action-btn-success"
                onclick="copyToClipboard('shortUrlInput-<%= url.shortId %>')"
                aria-label="Copy URL"
              >
                <i class="fas fa-copy"></i> Copy
              </button>
              <button
                class="action-btn action-btn-primary"
                onclick="openToURL('shortUrlInput-<%= url.shortId %>')"
                aria-label="Open URL"
              >
                <i class="fas fa-external-link-alt"></i> Open
              </button>
              <button
                class="action-btn action-btn-secondary"
                onclick="toggleQRCode('<%= url.shortId %>')"
                aria-label="Show QR Code"
              >
                <i class="fas fa-qrcode"></i> QR Code
              </button>
            </div>
          </div>

          <div class="qr-code-preview" id="qrCode-<%= url.shortId %>">
            <% if (url.qrCodeUrl) { %>
            <div style="position: relative; display: inline-block">
              <img 
                src="<%= typeof ensureProxiedUrl === 'function' ? ensureProxiedUrl(url.qrCodeUrl) : url.qrCodeUrl %>" 
                alt="QR Code" 
                loading="lazy" 
                onerror="console.error('QR code image failed to load:', this.src); this.src='/img/qr-error.png'; this.onerror=null;"
                onclick="previewQRCodeFullscreen('<%= url.qrCodeUrl %>', '<%= url.shortId %>')"
                style="cursor: pointer;"
                title="Click to enlarge"
              />
              <a
                href="<%= url.qrCodeUrl %>"
                download="<%= url.name || 'qrcode' %>-<%= url.shortId %>.png"
                class="download-qr"
                style="
                  width: 30px; height: 30px; color: var(--primary);"
                onclick="event.stopPropagation(); downloadQRCode('<%= url.qrCodeUrl %>', '<%= url.shortId %>'); return false;"
                title="Download QR Code"
              >
                <i class="fas fa-download"></i>
              </a>
              <button 
                class="regenerate-qr"
                onclick="event.stopPropagation(); generateCustomQRCode('<%= url._id %>', '<%= url.shortId %>'); return false;"
                title="Customize QR Code"
                style="position: absolute; bottom: 0px; left: -25px; background-color: transparent; color: var(--primary); width: 35px; height: 35px; display: flex; align-items: center; justify-content: center; border-radius: 50%; box-shadow: var(--shadow-md); border: none; cursor: pointer;"
              >
                <i class="fas fa-cog"></i>
              </button>
            </div>
            <% } else { %>
            <button
              class="btn btn-primary"
              onclick="generateCustomQRCode('<%= url._id %>', '<%= url.shortId %>')"
            >
              <i class="fas fa-qrcode"></i> Generate QR Code
            </button>
            <% } %>
          </div>

          <div class="analytics-grid">
            <div class="analytic-card">
              <h3>🖱️ Total Clicks</h3>
              <p class="stat"><%= url.visitHistory.length %></p>
            </div>
            <div class="analytic-card">
              <h3>🌍 Countries</h3>
              <p class="stat">
                <%= [...new Set(url.visitHistory.map(v => v.country))].length %>
              </p>
            </div>
            <div class="analytic-card">
              <h3>📱 Devices</h3>
              <p class="stat">
                <%= [...new Set(url.visitHistory.map(v => v.deviceType))].length
                %>
              </p>
            </div>
          </div>

          <div style="text-align: right; margin: 1rem 0">
            <button
              type="button"
              class="toggle-btn"
              onclick="toggleHistorySection('<%= url.shortId %>')"
            >
              View click history <i class="fas fa-chevron-down"></i>
            </button>
          </div>

          <div class="expandable-section" id="history-<%= url.shortId %>">
            <div class="table-container">
              <h3>📅 Click History</h3>
              <table class="click-history-table">
                <thead>
                  <tr>
                    <th>Date</th>
                    <th>Location</th>
                    <th>Device</th>
                    <th>Platform</th>
                    <th>Browser</th>
                  </tr>
                </thead>
                <tbody>
                  <% if (url.formattedHistory && url.formattedHistory.length >
                  0) { %> <% url.formattedHistory.forEach(visit => { %>
                  <tr>
                    <td><%= visit.formattedDate %></td>
                    <td><%= visit.country || 'Unknown' %></td>
                    <td>
                      <span class="device-icon">
                        <%= visit.deviceType === 'Mobile' ? '📱' : '💻' %>
                      </span>
                      <%= visit.deviceType || 'Desktop' %>
                    </td>
                    <td>
                      <span class="platform-icon"
                        ><%= visit.platformIcon %></span
                      >
                      <%= visit.platform || 'Unknown' %>
                    </td>
                    <td>
                      <span class="browser-icon"><%= visit.browserIcon %></span>
                      <%= visit.browser || 'Unknown' %>
                    </td>
                  </tr>
                  <% }) %> <% } else { %>
                  <tr>
                    <td colspan="5" style="text-align: center">
                      No clicks yet.
                    </td>
                  </tr>
                  <% } %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
        <% } %> <% }) %>
      </section>
      <% } else { %>
      <div class="card" style="margin-top: 2rem; text-align: center">
        <i
          class="fas fa-link"
          style="font-size: 3rem; color: var(--primary); margin-bottom: 1rem"
        ></i>
        <h3>No shortened URLs yet</h3>
        <p style="margin: 1rem 0">
          Create your first shortened URL using the form above.
        </p>
      </div>
      <% } %> -->

      <div class="toast" id="toast">Copied to clipboard!</div>

      <!-- URL Edit Modal -->
      <div
        class="modal-overlay"
        id="editUrlModal"
        style="
          display: none;
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.7);
          z-index: 1000;
          justify-content: center;
          align-items: center;
          backdrop-filter: blur(5px);
          animation: fadeIn 0.3s ease;
        "
      >
        <div
          class="modal-container"
          style="
            background: var(--card-bg);
            border-radius: 1rem;
            max-width: 600px;
            width: 90%;
            padding: 1.5rem;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
            animation: slideIn 0.3s ease;
            color: var(--text);
            position: relative;
          "
        >
          <button
            class="modal-close"
            onclick="closeEditModal()"
            style="
              position: absolute;
              top: 1rem;
              right: 1rem;
              background: transparent;
              border: none;
              font-size: 1.2rem;
              cursor: pointer;
              width: auto;
              height: auto;
              padding: 0.3rem;
              color: var(--text);
              transition: transform 0.3s ease;
            "
          >
            <i class="fas fa-times"></i>
          </button>

          <h2 style="margin-bottom: 1.5rem; color: var(--text)">
            <i class="fas fa-edit" style="margin-right: 0.5rem"></i> Edit URL
          </h2>

          <form id="editUrlForm">
            <input type="hidden" id="editUrlId" name="shortId" />
            <% if (locals.csrfToken) { %>
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
            <% } %>

            <div class="form-group">
              <label
                for="editName"
                style="
                  margin-bottom: 0.5rem;
                  display: block;
                  color: var(--text-light);
                "
                >URL Name</label
              >
              <input
                type="text"
                id="editName"
                name="name"
                placeholder="Custom name"
                maxlength="50"
              />
            </div>

            <div class="form-group">
              <label
                for="editRedirectUrl"
                style="
                  margin-bottom: 0.5rem;
                  display: block;
                  color: var(--text-light);
                "
                >Destination URL</label
              >
              <input
                type="url"
                id="editRedirectUrl"
                name="redirectUrl"
                placeholder="https://example.com"
                required
              />
            </div>

            <div class="form-group">
              <label
                for="editExpiresAt"
                style="
                  margin-bottom: 0.5rem;
                  display: block;
                  color: var(--text-light);
                "
                >Expiration Date</label
              >
              <input
                type="date"
                id="editExpiresAt"
                name="expiresAt"
                min="<%= new Date().toISOString().split('T')[0] %>"
              />
            </div>

            <div
              class="form-group"
              style="display: flex; align-items: center; margin-top: 1rem"
            >
              <label
                for="editIsActive"
                style="
                  display: flex;
                  align-items: center;
                  gap: 0.5rem;
                  cursor: pointer;
                  margin-bottom: 0;
                "
              >
                <div
                  class="toggle-switch"
                  style="
                    position: relative;
                    width: 50px;
                    height: 24px;
                    border-radius: 12px;
                    background-color: var(--secondary);
                    transition: background-color 0.3s ease;
                  "
                >
                  <input
                    type="checkbox"
                    id="editIsActive"
                    name="isActive"
                    style="opacity: 0; width: 0; height: 0"
                    onchange="this.parentNode.style.backgroundColor = this.checked ? 'var(--success)' : 'var(--secondary)'; this.nextElementSibling.style.transform = this.checked ? 'translateX(26px)' : 'translateX(0)';"
                  />
                  <span
                    class="toggle-slider"
                    style="
                      position: absolute;
                      top: 2px;
                      left: 2px;
                      width: 20px;
                      height: 20px;
                      border-radius: 50%;
                      background-color: white;
                      transition: transform 0.3s ease;
                    "
                  ></span>
                </div>
                <span>Active</span>
              </label>
            </div>

            <div
              class="form-group expandable-section"
              id="editCustomOverlaySection"
            >
              <div
                style="
                  display: flex;
                  align-items: center;
                  margin: 1rem 0;
                  padding: 0.5rem 0;
                  border-top: 1px solid var(--border);
                  border-bottom: 1px solid var(--border);
                "
              >
                <label
                  for="editCustomOverlayEnabled"
                  style="
                    display: flex;
                    align-items: center;
                    gap: 0.5rem;
                    cursor: pointer;
                    margin-bottom: 0;
                  "
                >
                  <div
                    class="toggle-switch"
                    style="
                      position: relative;
                      width: 50px;
                      height: 24px;
                      border-radius: 12px;
                      background-color: var(--secondary);
                      transition: background-color 0.3s ease;
                    "
                  >
                    <input
                      type="checkbox"
                      id="editCustomOverlayEnabled"
                      name="customOverlayEnabled"
                      style="opacity: 0; width: 0; height: 0"
                      onchange="
                        this.parentNode.style.backgroundColor = this.checked ? 'var(--primary)' : 'var(--secondary)';
                        toggleEditOverlayOptions(this.checked);
                      "
                    />
                    <span
                      class="toggle-slider"
                      style="
                        position: absolute;
                        top: 2px;
                        left: 2px;
                        width: 20px;
                        height: 20px;
                        border-radius: 50%;
                        background-color: white;
                        transition: transform 0.3s ease;
                      "
                    ></span>
                  </div>
                  <span style="font-weight: 500"
                    >Enable Custom Overlay Page</span
                  >
                </label>
              </div>

              <div id="editOverlayOptions" class="expandable-section">
                <div class="form-group">
                  <label
                    for="editOverlayText"
                    style="
                      margin-bottom: 0.5rem;
                      display: block;
                      color: var(--text-light);
                    "
                    >Overlay Message</label
                  >
                  <input
                    type="text"
                    id="editOverlayText"
                    name="overlayText"
                    placeholder="Message to display on the overlay page"
                  />
                </div>

                <div style="display: flex; gap: 0.5rem; margin-bottom: 1rem">
                  <div class="form-group" style="flex: 1">
                    <label
                      for="editButtonText"
                      style="
                        margin-bottom: 0.5rem;
                        display: block;
                        color: var(--text-light);
                      "
                      >Button Text</label
                    >
                    <input
                      type="text"
                      id="editButtonText"
                      name="buttonText"
                      placeholder="Call to action"
                    />
                  </div>

                  <div class="form-group" style="flex: 2">
                    <label
                      for="editButtonUrl"
                      style="
                        margin-bottom: 0.5rem;
                        display: block;
                        color: var(--text-light);
                      "
                      >Button URL</label
                    >
                    <input
                      type="url"
                      id="editButtonUrl"
                      name="buttonUrl"
                      placeholder="https://example.com/special-offer"
                    />
                  </div>
                </div>

                <div class="form-group">
                  <label
                    for="editBackgroundColor"
                    style="
                      margin-bottom: 0.5rem;
                      display: block;
                      color: var(--text-light);
                    "
                    >Background Color</label
                  >
                  <input
                    type="color"
                    id="editBackgroundColor"
                    name="backgroundColor"
                    value="#000000"
                    style="width: 100%; height: 40px; border-radius: 0.5rem"
                  />
                  <div class="color-opacity" style="margin-top: 0.5rem">
                    <label
                      for="editBackgroundOpacity"
                      style="color: var(--text-light); font-size: 0.9rem"
                      >Opacity: <span id="opacityValue">80%</span></label
                    >
                    <input
                      type="range"
                      id="editBackgroundOpacity"
                      min="0"
                      max="100"
                      value="80"
                      style="width: 100%"
                      oninput="updateOpacityPreview(this.value)"
                    />
                  </div>
                </div>

                <div style="display: flex; gap: 0.5rem">
                  <div class="form-group" style="flex: 1">
                    <label
                      for="editTextColor"
                      style="
                        margin-bottom: 0.5rem;
                        display: block;
                        color: var (--text-light);
                      "
                      >Text Color</label
                    >
                    <input
                      type="color"
                      id="editTextColor"
                      name="textColor"
                      value="#ffffff"
                      style="width: 100%; height: 40px; border-radius: 0.5rem"
                    />
                  </div>

                  <div class="form-group" style="flex: 1">
                    <label
                      for="editButtonColor"
                      style="
                        margin-bottom: 0.5rem;
                        display: block;
                        color: var(--text-light);
                      "
                      >Button Color</label
                    >
                    <input
                      type="color"
                      id="editButtonColor"
                      name="buttonColor"
                      value="#3b82f6"
                      style="width: 100%; height: 40px; border-radius: 0.5rem"
                    />
                  </div>
                </div>
              </div>
            </div>

            <div
              class="form-actions"
              style="display: flex; gap: 1rem; margin-top: 1.5rem"
            >
              <button
                type="button"
                onclick="closeEditModal()"
                style="background-color: var(--secondary)"
              >
                Cancel
              </button>
              <button
                type="submit"
                id="saveUrlBtn"
                style="background-color: var(--primary)"
              >
                Save Changes
              </button>
            </div>
          </form>
        </div>
      </div>

      <!-- Delete Confirmation Modal -->
      <div
        class="modal-overlay"
        id="deleteConfirmModal"
        style="
          display: none;
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.7);
          z-index: 1000;
          justify-content: center;
          align-items: center;
          backdrop-filter: blur(5px);
        "
      >
        <div
          class="modal-container"
          style="
            background: var(--card-bg);
            border-radius: 1rem;
            max-width: 450px;
            width: 90%;
            padding: 1.5rem;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
            text-align: center;
            color: var(--text);
          "
        >
          <div class="modal-header" style="margin-bottom: 1.5rem">
            <i
              class="fas fa-exclamation-triangle"
              style="font-size: 3rem; color: var(--danger); margin-bottom: 1rem"
            ></i>
            <h3>Delete URL</h3>
          </div>

          <p style="margin-bottom: 1.5rem; line-height: 1.6"></p>
            Are you sure you want to completely delete this URL? This action cannot be undone.
          </p>

          <div
            class="modal-footer"
            style="display: flex; gap: 1rem; justify-content: center"
          >
            <button
              onclick="closeDeleteModal()"
              style="background-color: var(--secondary)"
            >
              Cancel
            </button>
            <button
              id="confirmDeleteBtn"
              style="background-color: var(--danger)"
            >
              Delete URL
            </button>
          </div>
        </div>
      </div>

      
      <script>
        // Function to handle the edit URL parameter
        document.addEventListener("DOMContentLoaded", function() {
          // Parse URL parameters
          const urlParams = new URLSearchParams(window.location.search);
          const editShortId = urlParams.get('edit');
          
          if (editShortId) {
            console.log("Edit parameter detected:", editShortId);
            
            // Wait for content to fully load
            setTimeout(function() {
              // First try to find the URL card
              const urlCard = document.querySelector(`.url-card[data-id="${editShortId}"]`);
              
              if (urlCard) {
                console.log("Found URL card, opening edit modal");
                openEditModal(editShortId);
              } else {
                console.log("URL card not found, fetching URL data from API");
                // If the card doesn't exist (possibly direct edit link), fetch the URL data
                fetch(`/url/api/${editShortId}`)
                  .then(response => {
                    if (!response.ok) {
                      throw new Error(`Server responded with status: ${response.status}`);
                    }
                    return response.json();
                  })
                  .then(data => {
                    if (data.status === "success" && data.body.url) {
                      // Call openEditModal with the fetched URL data
                      openEditModal(editShortId, data.body.url);
                    } else {
                      console.error("Failed to get URL data:", data);
                      showToast("Could not find the link you're trying to edit");
                    }
                  })
                  .catch(error => {
                    console.error("Error fetching URL data:", error);
                    showToast("Error: " + error.message);
                  });
              }
            }, 500);
          }
        });
      </script>
    </div>
    
    <!-- Footer Section -->
    <footer class="footer">
      <div class="container">
        <div class="footer-content">
          <div class="footer-section about">
            <div class="logo-container">
              <h2>🔗 LinkSqueeze</h2>
            </div>
            <p class="footer-description">
              A powerful URL shortener with detailed analytics to help you track and optimize your links.
            </p>
            <div class="contact">
              <span><i class="fas fa-envelope"></i> businessfordevsav11@gmail.com</span>
            </div>
          </div>
          
          <div class="footer-section links">
            <h2>Quick Links</h2>
            <ul>
              <li><a href="/"><i class="fas fa-home"></i> Home</a></li>
              <li><a href="/dashboard"><i class="fas fa-link"></i> Dashboard</a></li>
              <li><a href="/privacy-policy"><i class="fas fa-shield-alt"></i> Privacy Policy</a></li>
              <li><a href="/terms-of-service"><i class="fas fa-file-contract"></i> Terms of Service</a></li>
              <li><a href="/api-docs"><i class="fas fa-code"></i> API Documentation</a></li>
            </ul>
          </div>
          
          <div class="footer-section social">
            <h2>Connect With Us</h2>
            <div class="socials">
              <a href="https://www.instagram.com/deval_savaliya" class="social-icon"><i class="fab fa-instagram"></i></a>
              <a href="https://github.com/businessfordevsav/" class="social-icon"><i class="fab fa-github"></i></a>
              <a href="https://in.linkedin.com/in/deval-savaliya" class="social-icon"><i class="fab fa-linkedin-in"></i></a>
            </div>
            <div class="app-version">
              <span>Version 1.0.0</span>
            </div>
          </div>
        </div>
        
        <div class="footer-bottom">
          <p>&copy; <%= new Date().getFullYear() %> LinkSqueeze. All rights reserved.</p>
          <div class="footer-theme-toggle">
            <span>Change Theme</span>
            <button class="footer-theme-btn" id="footerThemeToggle">
              <i class="fas fa-moon"></i>
              <i class="fas fa-sun"></i>
            </button>
          </div>
        </div>
      </div>
    </footer>

    <style>
      /* Footer Styles */
      .footer {
        background-color: var(--card-bg);
        color: var(--text);
        padding: 3rem 1rem 1rem;
        margin-top: 3rem;
        border-top: 1px solid var(--border);
        box-shadow: 0 -5px 15px rgba(0, 0, 0, 0.05);
        transition: background-color var(--transition-speed) ease,
                   color var(--transition-speed) ease;
      }

      .footer-content {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 2rem;
        margin-bottom: 2rem;
      }

      .footer-section h2 {
        font-size: 1.5rem;
        margin-bottom: 1.25rem;
        position: relative;
        display: inline-block;
      }

      .footer-section h2:after {
        content: '';
        position: absolute;
        left: 0;
        bottom: -10px;
        width: 50px;
        height: 3px;
        background: var(--primary);
        border-radius: 3px;
      }

      .logo-container {
        margin-bottom: 1rem;
      }

      .footer-description {
        margin-bottom: 1.5rem;
        line-height: 1.6;
        color: var(--text-light);
      }

      .contact span {
        display: block;
        margin-bottom: 0.5rem;
        color: var(--text-light);
        transition: color 0.3s ease;
      }

      .contact span i {
        margin-right: 0.5rem;
        color: var(--primary);
      }

      .footer-section.links ul {
        list-style: none;
      }

      .footer-section.links li {
        margin-bottom: 0.75rem;
      }

      .footer-section.links a {
        color: var(--text-light);
        text-decoration: none;
        transition: color 0.3s ease, transform 0.3s ease;
        display: inline-block;
      }

      .footer-section.links a:hover {
        color: var(--primary);
        transform: translateX(5px);
      }

      .footer-section.links a i {
        margin-right: 0.5rem;
        color: var(--primary);
      }

      .socials {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 1.5rem;
      }

      .social-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        background-color: var(--background);
        color: var(--primary);
        border-radius: 50%;
        text-decoration: none;
        font-size: 1.2rem;
        transition: all 0.3s ease;
        border: 1px solid var(--border);
      }

      .social-icon:hover {
        background-color: var(--primary);
        color: white;
        transform: translateY(-5px);
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
      }

      .app-version {
        margin-top: 1rem;
        font-size: 0.85rem;
        color: var(--text-light);
      }

      .footer-bottom {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-top: 1.5rem;
        border-top: 1px solid var(--border);
        flex-wrap: wrap;
        gap: 1rem;
      }

      .footer-bottom p {
        font-size: 0.9rem;
        color: var (--text-light);
      }

      .footer-theme-toggle {
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }

      .footer-theme-toggle span {
        font-size: 0.9rem;
        color: var (--text-light);
      }

      .footer-theme-btn {
        background: transparent;
        border: none;
        color: var(--text);
        cursor: pointer;
        padding: 0.3rem;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 35px;
        height: 35px;
        transition: background-color 0.3s ease;
      }

      .footer-theme-btn:hover {
        background-color: var(--border);
        transform: none;
        box-shadow: none;
      }

      [data-theme="dark"] .footer-theme-btn .fa-moon {
        display: none;
      }

      [data-theme="dark"] .footer-theme-btn .fa-sun {
        display: inline-block;
      }

      [data-theme="light"] .footer-theme-btn .fa-moon {
        display: inline-block;
      }

      [data-theme="light"] .footer-theme-btn .fa-sun {
        display: none;
      }

      @media (max-width: 768px) {
        .footer-content {
          grid-template-columns: 1fr;
          gap: 2rem;
        }

        .footer-bottom {
          flex-direction: column;
          align-items: center;
          text-align: center;
          gap: 1rem;
        }
      }
    </style>

    <script>
        // Initialize theme from local storage or system preference
        function initTheme() {
          const savedTheme = localStorage.getItem("theme");

          if (savedTheme) {
            document.documentElement.setAttribute("data-theme", savedTheme);
          } else if (
            window.matchMedia &&
            window.matchMedia("(prefers-color-scheme: dark)").matches
          ) {
            document.documentElement.setAttribute("data-theme", "dark");
          }
        }

        // Toggle theme between light and dark
        function toggleTheme() {
          const currentTheme =
            document.documentElement.getAttribute("data-theme") || "light";
          const newTheme = currentTheme === "light" ? "dark" : "light";

          document.documentElement.setAttribute("data-theme", newTheme);
          localStorage.setItem("theme", newTheme);
        }

        // Initialize theme
        initTheme();

        // User dropdown toggle functionality
        document.addEventListener("DOMContentLoaded", function() {
          const userMenuTrigger = document.getElementById("userMenuTrigger");
          const userDropdown = document.getElementById("userDropdown");
          
          if (userMenuTrigger && userDropdown) {
            userMenuTrigger.addEventListener("click", function() {
              userDropdown.classList.toggle("visible");
            });
            
            // Close dropdown when clicking outside
            document.addEventListener("click", function(event) {
              if (!userMenuTrigger.contains(event.target) && !userDropdown.contains(event.target)) {
                userDropdown.classList.remove("visible");
              }
            });
          }

          
          
          // Theme toggle in dropdown
          const themeToggleMenu = document.getElementById("themeToggleMenu");
          if (themeToggleMenu) {
            themeToggleMenu.addEventListener("click", function(e) {
              e.preventDefault();
              toggleTheme();
            });
          }
        });

        function copyToClipboard(inputId) {
          // Accept inputId as argument
          const input = document.getElementById(inputId); // Use the specific ID
          input.select();
          input.setSelectionRange(0, 99999); // For mobile devices

          navigator.clipboard
            .writeText(input.value)
            .then(() => {
              showToast("URL copied to clipboard!");
              // Add copy animation class
              input.classList.add("copy-animation");
              // Remove animation class after animation completes
              setTimeout(() => {
                input.classList.remove("copy-animation");
              }, 500);
            })
            .catch((err) => {
              console.error("Copy failed:", err);
              // Fallback for older browsers or insecure contexts
              try {
                document.execCommand("copy");
                showToast("URL copied to clipboard!");
              } catch (execErr) {
                console.error("Fallback copy failed:", execErr);
                showToast("Copy failed. Please copy manually.");
              }
            });
        }

        function openToURL(inputId) {
          // Accept inputId as argument
          const input = document.getElementById(inputId); // Use the specific ID
          window.open(input.value, "_blank");
          location.reload(true);
        }
        function previewQRCodeFullscreen(qrCodeUrl, id) {
          const qrCodePreview = document.createElement("div");
          qrCodePreview.className = "qr-code-preview-fullscreen";
          qrCodePreview.innerHTML = `
            <img src="${qrCodeUrl}" alt="QR Code" />
            <button class="close-btn" onclick="this.parentNode.remove()">✖</button>
          `;
          document.body.appendChild(qrCodePreview);
        }
        function showToast(message) {
          const toast = document.getElementById("toast");
          toast.textContent = message;
          toast.style.display = "block";

          // Remove any existing animation class
          toast.classList.remove("hiding");

          // Set timeout to add hiding animation before removing
          setTimeout(() => {
            toast.classList.add("hiding");

            // Wait for animation to complete before hiding
            setTimeout(() => {
              toast.style.display = "none";
              toast.classList.remove("hiding");
            }, 300);
          }, 2700);
        }

        // Toggle QR code visibility
        function toggleQRCode(id) {
          const qrCodeElement = document.getElementById(`qrCode-${id}`);
          qrCodeElement.classList.toggle("visible");
        }

        // Toggle history section visibility
        function toggleHistorySection(id) {
          const historySection = document.getElementById(`history-${id}`);
          const button = event.currentTarget;

          historySection.classList.toggle("expanded");
          button.classList.toggle("active");

          // Update button text based on state
          const icon = button.querySelector("i");
          if (historySection.classList.contains("expanded")) {
            button.innerHTML = `Hide click history <i class="fas fa-chevron-up"></i>`;
          } else {
            button.innerHTML = `View click history <i class="fas fa-chevron-down"></i>`;
          }
        }

        // Theme toggle button event listener
      document
        .getElementById("footerThemeToggle")
        .addEventListener("click", toggleTheme);

        // Toggle advanced options section
        document
          .getElementById("advancedToggle")
          .addEventListener("click", function () {
            const advancedSection = document.getElementById("advancedOptions");
            const button = this;

            advancedSection.classList.toggle("expanded");
            button.classList.toggle("active");

            // Update button icon based on state
            const icon = button.querySelector("i");
            if (advancedSection.classList.contains("expanded")) {
              icon.className = "fas fa-chevron-up";
            } else {
              icon.className = "fas fa-chevron-down";
            }
          });

        // Toggle overlay options based on checkbox state
        document
          .getElementById("customOverlayEnabled")
          .addEventListener("change", function () {
            const overlaySection = document.getElementById("overlayOptions");
            if (this.checked) {
              overlaySection.classList.add("expanded");
            } else {
              overlaySection.classList.remove("expanded");
            }
          });

        // Toggle ad mode options based on checkbox state
        document
          .getElementById("adModeEnabled")
          .addEventListener("change", function () {
            const adModeSection = document.getElementById("adModeOptions");
            if (this.checked) {
              adModeSection.classList.add("expanded");
            } else {
              adModeSection.classList.remove("expanded");
            }
          });

        // Form submission handler with improved visual feedback
        document
          .getElementById("shortenForm")
          .addEventListener("submit", function (e) {
            // Properly handle the expiration date
            const expirationDateInput = document.getElementById("expirationDate");
            if (expirationDateInput && expirationDateInput.value) {
              // Create a hidden field to store the ISO date string
              const hiddenDate = document.createElement("input");
              hiddenDate.type = "hidden";
              hiddenDate.name = "expiresAt";
              
              // Create a date with time set to end of day
              const expDate = new Date(expirationDateInput.value);
              expDate.setHours(23, 59, 59, 999);
              
              hiddenDate.value = expDate.toISOString();
              console.log(`Setting expiration date to: ${hiddenDate.value}`);
              
              // Add to form
              this.appendChild(hiddenDate);
            }
            
            const button = document.getElementById("submitBtn");
            const originalText = button.innerHTML;
            
            // Disable button and show loading state
            button.disabled = true;
            button.innerHTML = `<i class="fas fa-spinner fa-spin"></i> Shortening...`;

            // Add timer to re-enable button if submission takes too long
            setTimeout(() => {
              if (button.disabled) {
                button.disabled = false;
                button.innerHTML = originalText;
                showToast(
                  "Request is taking longer than expected. Please try again."
                );
              }
            }, 10000);
          });

        // Add input validation for better UX
        document
          .getElementById("originalUrl")
          .addEventListener("input", function () {
            const submitBtn = document.getElementById("submitBtn");
            if (this.validity.valid) {
              this.style.borderColor = "var(--success)";
              submitBtn.disabled = false;
            } else {
              this.style.borderColor = this.value
                ? "var(--danger)"
                : "var(--border)";
              submitBtn.disabled = !this.value ? false : true;
            }
          });

        // Add real-time character counter for custom name
        document
          .getElementById("customName")
          .addEventListener("input", function () {
            const maxLength = 50;
            const remaining = maxLength - this.value.length;

            // Update counter or create it if it doesn't exist
            let counter = this.nextElementSibling;
            if (!counter || !counter.classList.contains("char-counter")) {
              counter = document.createElement("small");
              counter.classList.add("char-counter");
              counter.style.display = "block";
              counter.style.textAlign = "right";
              counter.style.color = "var(--text-light)";
              counter.style.marginTop = "0.25rem";
              this.insertAdjacentElement("afterend", counter);
            }

            counter.textContent = `${remaining} characters remaining`;

            // Change color when approaching limit
            if (remaining < 10) {
              counter.style.color = "var(--warning)";
            } else {
              counter.style.color = "var(--text-light)";
            }
          });

        // Apply ripple effect to all buttons
        document.addEventListener("click", function (e) {
          if (
            e.target.tagName === "BUTTON" &&
            !e.target.classList.contains("toggle-btn")
          ) {
            const button = e.target;

            // Create ripple element
            const ripple = document.createElement("span");
            ripple.classList.add("ripple");
            button.appendChild(ripple);

            // Position the ripple
            const rect = button.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            ripple.style.cssText = `
              position: absolute;
              top: ${y}px;
              left: ${x}px;
              background: rgba(255,255,255,0.4);
              border-radius: 50%;
              pointer-events: none;
              transform: translate(-50%, -50%) scale(0);
              width: ${button.offsetWidth * 2}px;
              height: ${button.offsetWidth * 2}px;
              animation: ripple-effect 0.6s linear;
            `;

            setTimeout(() => {
              ripple.remove();
            }, 600);
          }
        });

        // Add ripple effect keyframes if they don't exist
        if (!document.querySelector("#ripple-keyframes")) {
          const style = document.createElement("style");
          style.id = "ripple-keyframes";
          style.textContent = `
            @keyframes ripple-effect {
              0% {
                transform: translate(-50%, -50%) scale(0);
                opacity: 1;
              }
              100% {
                transform: translate(-50%, -50%) scale(1);
                opacity: 0;
              }
            }
          `;
          document.head.appendChild(style);
        }

        // Edit URL functionality
        /**
 * Opens the URL edit modal
 * @param {string} shortId - The short ID of the URL to edit
 * @param {Object} urlData - Optional URL data object when accessing from other pages
 */
function openEditModal(shortId, urlData) {
  console.log(`Opening edit modal for URL: ${shortId}`);
  
  // Different handling based on where the edit request comes from
  if (urlData) {
    // CASE 1: Direct access from dashboard/analytics pages (API data provided)
    handleDirectEdit(shortId, urlData);
  } else {
    // CASE 2: Edit from the current page (URL card exists on page)
    handleLocalEdit(shortId);
  }
  
  // Show modal regardless of edit source
  const modal = document.getElementById("editUrlModal");
  modal.style.display = "flex";
}

/**
 * Handles edit when accessed directly from another page (dashboard/analytics)
 * @param {string} shortId - The URL's short ID
 * @param {Object} urlData - URL data from API
 */
function handleDirectEdit(shortId, urlData) {
  // Set basic form values
  document.getElementById("editUrlId").value = shortId;
  document.getElementById("editName").value = urlData.name || "";
  document.getElementById("editRedirectUrl").value = urlData.redirectUrl || "";

  // Set expiration date if available
  if (urlData.expiresAt) {
    const date = new Date(urlData.expiresAt);
    document.getElementById("editExpiresAt").value = date.toISOString().split("T")[0];
  } else {
    document.getElementById("editExpiresAt").value = "";
  }

  // Set active state and update toggle appearance
  const activeCheckbox = document.getElementById("editIsActive");
  activeCheckbox.checked = urlData.isActive;
  activeCheckbox.parentNode.style.backgroundColor = urlData.isActive ? "var(--success)" : "var(--secondary)";
  activeCheckbox.nextElementSibling.style.transform = urlData.isActive ? "translateX(26px)" : "translateX(0)";

  // Handle custom overlay settings
  const hasOverlay = urlData.customOverlay && urlData.customOverlay.enabled;
  setOverlaySettings(hasOverlay, urlData.customOverlay);
}

/**
 * Handles edit for URLs on the current page
 * @param {string} shortId - The URL's short ID
 */
function handleLocalEdit(shortId) {
  // Find URL card on current page
  const url = document.querySelector(`.url-card[data-id="${shortId}"]`);
  if (!url) {
    console.error(`URL card not found for ID: ${shortId}`);
    showToast("Could not find the URL to edit");
    return false;
  }

  // Get data from the URL card and shortURL input
  const shortUrlInput = document.getElementById(`shortUrlInput-${shortId}`);
  const redirectUrl = shortUrlInput ? shortUrlInput.getAttribute("data-redirect") : "";
  const name = url.getAttribute("data-name") || "";
  const expiresAt = url.getAttribute("data-expires") || "";
  const isActive = url.getAttribute("data-active") === "true";

  // Set basic form values
  document.getElementById("editUrlId").value = shortId;
  document.getElementById("editName").value = name;
  document.getElementById("editRedirectUrl").value = redirectUrl || "";

  // Set expiration date if available
  if (expiresAt) {
    const date = new Date(expiresAt);
    document.getElementById("editExpiresAt").value = date.toISOString().split("T")[0];
  } else {
    document.getElementById("editExpiresAt").value = "";
  }

  // Set active state and update toggle appearance
  const activeCheckbox = document.getElementById("editIsActive");
  activeCheckbox.checked = isActive;
  activeCheckbox.parentNode.style.backgroundColor = isActive ? "var(--success)" : "var(--secondary)";
  activeCheckbox.nextElementSibling.style.transform = isActive ? "translateX(26px)" : "translateX(0)";

  // Handle custom overlay settings
  const hasOverlay = url.getAttribute("data-has-overlay") === "true";
  
  // Build overlay data from attributes if overlay is enabled
  let overlayData = null;
  if (hasOverlay) {
    overlayData = {
      text: url.getAttribute("data-overlay-text") || "",
      buttonText: url.getAttribute("data-button-text") || "",
      buttonUrl: url.getAttribute("data-button-url") || "",
      backgroundColor: url.getAttribute("data-bg-color") || "rgba(0, 0, 0, 0.7)",
      textColor: url.getAttribute("data-text-color") || "#ffffff",
      buttonColor: url.getAttribute("data-button-color") || "#3b82f6"
    };
  }
  
  setOverlaySettings(hasOverlay, overlayData);
  return true;
}

/**
 * Sets overlay form settings based on data
 * @param {boolean} hasOverlay - Whether overlay is enabled
 * @param {Object} overlayData - Overlay settings if enabled
 */
function setOverlaySettings(hasOverlay, overlayData) {
  // Set overlay checkbox state
  const overlayCheckbox = document.getElementById("editCustomOverlayEnabled");
  overlayCheckbox.checked = hasOverlay;
  overlayCheckbox.parentNode.style.backgroundColor = hasOverlay ? "var(--primary)" : "var(--secondary)";
  overlayCheckbox.nextElementSibling.style.transform = hasOverlay ? "translateX(26px)" : "translateX(0)";

  // Toggle overlay options visibility
  toggleEditOverlayOptions(hasOverlay);

  // If overlay is enabled, set overlay form values
  if (hasOverlay && overlayData) {
    document.getElementById("editOverlayText").value = overlayData.text || "";
    document.getElementById("editButtonText").value = overlayData.buttonText || "";
    document.getElementById("editButtonUrl").value = overlayData.buttonUrl || "";

    // Parse background color and opacity for color picker
    const bgColor = overlayData.backgroundColor || "rgba(0, 0, 0, 0.8)";
    let opacity = 80;
    
    if (bgColor.includes("rgba")) {
      const match = bgColor.match(/rgba\((\d+),\s*(\d+),\s*(\d+),\s*([\d.]+)\)/);
      if (match && match[4]) {
        opacity = Math.round(parseFloat(match[4]) * 100);

        // Convert RGB to hex for color picker
        const r = parseInt(match[1]).toString(16).padStart(2, "0");
        const g = parseInt(match[2]).toString(16).padStart(2, "0");
        const b = parseInt(match[3]).toString(16).padStart(2, "0");
        document.getElementById("editBackgroundColor").value = `#${r}${g}${b}`;
      }
    } else {
      document.getElementById("editBackgroundColor").value = bgColor;
    }

    // Set opacity slider and text
    document.getElementById("editBackgroundOpacity").value = opacity;
    document.getElementById("opacityValue").textContent = `${opacity}%`;
    
    // Set text and button colors
    document.getElementById("editTextColor").value = overlayData.textColor || "#ffffff";
    document.getElementById("editButtonColor").value = overlayData.buttonColor || "#3b82f6";
  }
}
        function closeEditModal() {
          const modal = document.getElementById("editUrlModal");
          modal.style.display = "none";
        }

        function toggleEditOverlayOptions(show) {
          const overlayOptions = document.getElementById("editOverlayOptions");
          if (show) {
            overlayOptions.classList.add("expanded");
          } else {
            overlayOptions.classList.remove("expanded");
          }
        }

        function updateOpacityPreview(value) {
          document.getElementById("opacityValue").textContent = `${value}%`;
        }

        // Handle form submission
        document
          .getElementById("editUrlForm")
          .addEventListener("submit", function (e) {
            e.preventDefault();

            const shortId = document.getElementById("editUrlId").value;
            const name = document.getElementById("editName").value;
            const redirectUrl =
              document.getElementById("editRedirectUrl").value;
            const expiresAt = document.getElementById("editExpiresAt").value;
            const isActive = document.getElementById("editIsActive").checked;

            const overlayEnabled = document.getElementById(
              "editCustomOverlayEnabled"
            ).checked;
            const overlayText =
              document.getElementById("editOverlayText").value;
            const buttonText = document.getElementById("editButtonText").value;
            const buttonUrl = document.getElementById("editButtonUrl").value;

            // Handle color values
            const backgroundColor = document.getElementById(
              "editBackgroundColor"
            ).value;
            const opacity =
              document.getElementById("editBackgroundOpacity").value / 100;
            const textColor = document.getElementById("editTextColor").value;
            const buttonColor =
              document.getElementById("editButtonColor").value;

            // Convert hex to rgba for background
            let bgColor;
            if (backgroundColor.startsWith("#")) {
              const r = parseInt(backgroundColor.substring(1, 3), 16);
              const g = parseInt(backgroundColor.substring(3, 5), 16);
              const b = parseInt(backgroundColor.substring(5, 7), 16);
              bgColor = `rgba(${r}, ${g}, ${b}, ${opacity})`;
            } else {
              bgColor = backgroundColor;
            }

            // Build custom overlay object
            const customOverlay = overlayEnabled
              ? {
                  enabled: true,
                  text: overlayText,
                  buttonText: buttonText,
                  buttonUrl: buttonUrl,
                  backgroundColor: bgColor,
                  textColor: textColor,
                  buttonColor: buttonColor,
                }
              : { enabled: false };

            // Build data for API request
            const data = {
              name: name,
              redirectUrl: redirectUrl,
              isActive: isActive,
              customOverlay: customOverlay,
            };

            // Add expiresAt if provided
            if (expiresAt) {
              data.expiresAt = expiresAt;
            }

            // Get CSRF token if available
            const csrfToken = document.querySelector('input[name="_csrf"]')?.value;

            // Show loading state
            const saveBtn = document.getElementById("saveUrlBtn");
            const originalText = saveBtn.innerHTML;
            saveBtn.disabled = true;
            saveBtn.innerHTML =
              '<i class="fas fa-spinner fa-spin"></i> Saving...';

            // Send API request
            fetch(`/url/${shortId}`, {
              method: "PATCH",
              headers: {
                "Content-Type": "application/json",
                ...(csrfToken && { "CSRF-Token": csrfToken })
              },
              body: JSON.stringify(data),
            })
              .then((response) => response.json())
              .then((data) => {
                if (data.status === "success") {
                  showToast("URL updated successfully");
                  closeEditModal();

                  // Reload the page to show updated info
                  setTimeout(() => {
                    window.location.reload();
                  }, 1000);
                } else {
                  throw new Error(data.message || "Failed to update URL");
                }
              })
              .catch((error) => {
                console.error("Error updating URL:", error);
                showToast("Error: " + error.message);

                // Reset button
                saveBtn.disabled = false;
                saveBtn.innerHTML = originalText;
              });
          });

        // Toggle switches
        document
          .querySelectorAll('.toggle-switch input[type="checkbox"]')
          .forEach((checkbox) => {
            checkbox.addEventListener("change", function () {
              const slider = this.nextElementSibling;
              slider.style.transform = this.checked
                ? "translateX(26px)"
                : "translateX(0)";
            });
          });

        // Delete URL functionality
        function openDeleteModal(shortId) {
          // Set shortId for deletion
          const confirmBtn = document.getElementById("confirmDeleteBtn");
          confirmBtn.setAttribute("data-shortid", shortId);

          // Show modal
          const modal = document.getElementById("deleteConfirmModal");
          modal.style.display = "flex";
        }

        function closeDeleteModal() {
          const modal = document.getElementById("deleteConfirmModal");
          modal.style.display = "none";
        }

        // Handle delete confirmation - updated to actually delete the URL
        document
          .getElementById("confirmDeleteBtn")
          .addEventListener("click", function () {
            const shortId = this.getAttribute("data-shortid");
            if (!shortId) return;

            // Get CSRF token if available
            const csrfToken = document.querySelector('input[name="_csrf"]')?.value;

            // Show loading state
            const originalText = this.innerHTML;
            this.disabled = true;
            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Deleting...';

            // Send DELETE request to remove the URL completely
            fetch(`/url/${shortId}`, {
              method: "DELETE",
              headers: {
                "Content-Type": "application/json",
                ...(csrfToken && { "CSRF-Token": csrfToken })
              }
            })
              .then((response) => {
                if (!response.ok) {
                  throw new Error(`Server responded with status: ${response.status}`);
                }
                return response.json();
              })
              .then((data) => {
                if (data.status === "success") {
                  showToast("URL deleted successfully");
                  closeDeleteModal();

                  // Remove the URL card from the UI without page reload
                  const urlCard = document.querySelector(`.url-card[data-id="${shortId}"]`);
                  if (urlCard) {
                    urlCard.style.animation = "fadeOut 0.5s ease forwards";
                    setTimeout(() => {
                      urlCard.remove();
                      
                      // If no more URLs, show empty state
                      const urlCards = document.querySelectorAll('.url-card');
                      if (urlCards.length === 0) {
                        const urlHistory = document.querySelector('.url-history');
                        if (urlHistory) {
                          urlHistory.innerHTML = `
                            <div class="card" style="margin-top: 2rem; text-align: center">
                              <i class="fas fa-link" style="font-size: 3rem; color: var(--primary); margin-bottom: 1rem"></i>
                              <h3>No shortened URLs yet</h3>
                              <p style="margin: 1rem 0">Create your first shortened URL using the form above.</p>
                            </div>
                          `;
                        }
                      }
                    }, 500);
                  } else {
                    // Fallback to page reload if card not found
                    setTimeout(() => {
                      window.location.reload();
                    }, 1000);
                  }
                } else {
                  throw new Error(data.message || "Failed to delete URL");
                }
              })
              .catch((error) => {
                console.error("Error deleting URL:", error);
                showToast("Error: " + error.message);

                // Reset button
                this.disabled = false;
                this.innerHTML = originalText;
              });
          });

        // Add these styles to fix modal animation and display
        document.head.insertAdjacentHTML(
          "beforeend",
          `
        <style>
          @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
          }
          
          @keyframes slideIn {
            from { transform: translateY(-20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
          }
          
          .toggle-switch input:checked ~ .toggle-slider {
            transform: translateX(26px) !important;
          }
          
          /* Dark mode color pickers fix */
          [data-theme="dark"] input[type="color"] {
            background-color: #334155;
            border: 1px solid #475569;
          }
          
          /* Modal size fixes for smaller screens */
          @media (max-width: 576px) {
            .modal-container {
              width: 95% !important;
              padding: 1rem !important;
            }
            
            .form-actions {
              flex-direction: column;
            }
            
            .form-actions button {
              width: 100%;
            }
          }
        </style>
      `
        );

        // Add regenerateQRCode function
        function regenerateQRCode(shortId) {
          // Show a simple modal with ad mode options
          const modal = document.createElement("div");
          modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            display: flex;
            justify-content: center;
            align-items: center;
            backdrop-filter: blur(5px);
          `;

          const content = document.createElement("div");
          content.style.cssText = `
            background: var(--card-bg);
            border-radius: 1rem;
            max-width: 450px;
            width: 90%;
            padding: 1.5rem;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
            color: var(--text);
          `;

          content.innerHTML = `
            <h3 style="margin-bottom: 1rem;">Generate QR Code</h3>
            
            <div class="form-group" style="margin-bottom: 1rem;">
              <label style="display: flex; align-items: center; gap: 0.5rem; cursor: pointer; margin-bottom: 0.75rem;">
                <input type="checkbox" id="modal-adModeEnabled" style="width: auto; cursor: pointer;">
                Enable QR code ad mode with app icon
              </label>
              
              <div class="expandable-section" id="modal-adModeOptions" style="margin-left: 1.5rem; display: none;">
                <div class="form-group">
                  <label style="display: block; margin-bottom: 0.25rem; font-size: 0.9rem; color: var(--text-light)">
                    Icon Size (% of QR code)
                  </label>
                  <input 
                    type="range" 
                    id="modal-iconSizePercent" 
                    min="10" 
                    max="30" 
                    value="20" 
                    style="width: 100%"
                    oninput="document.getElementById('modal-iconSizeValue').textContent = this.value + '%'"
                  />
                  <small id="modal-iconSizeValue" style="display: block; text-align: center; margin-top: 0.25rem; color: var(--text-light)">20%</small>
                </div>
                <div class="form-group" style="margin-top: 0.5rem">
                  <label style="display: flex; align-items: center; gap: 0.5rem; cursor: pointer;">
                    <input type="checkbox" id="modal-useLargeIcon" style="width: auto; cursor: pointer;">
                    Use larger icon
                  </label>
                </div>
              </div>
            </div>
            
            <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 1.5rem;">
              <button id="modal-cancelBtn" style="background-color: var(--secondary);">Cancel</button>
              <button id="modal-generateBtn" style="background-color: var(--primary);">Generate QR Code</button>
            </div>
          `;

          modal.appendChild(content);
          document.body.appendChild(modal);

          // Toggle ad mode options
          document
            .getElementById("modal-adModeEnabled")
            .addEventListener("change", function () {
              document.getElementById("modal-adModeOptions").style.display =
                this.checked ? "block" : "none";
            });

          // Cancel button
          document
            .getElementById("modal-cancelBtn")
            .addEventListener("click", function () {
              document.body.removeChild(modal);
            });

          // Generate button
          document
            .getElementById("modal-generateBtn")
            .addEventListener("click", function () {
              const adModeEnabled = document.getElementById(
                "modal-adModeEnabled"
              ).checked;
              const iconSizePercent = document.getElementById(
                "modal-iconSizePercent"
              ).value;
              const useLargeIcon =
                document.getElementById("modal-useLargeIcon").checked;

              // Show loading state
              this.disabled = true;
              this.innerHTML =
                '<i class="fas fa-spinner fa-spin"></i> Generating...';

              // Send request to regenerate QR code
              fetch(`/url/${shortId}/qrcode`, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  adModeEnabled,
                  iconSizePercent,
                  useLargeIcon,
                }),
              })
                .then((response) => response.json())
                .then((data) => {
                  if (data.status === "success") {
                    showToast("QR Code generated successfully");
                    // Close modal
                    document.body.removeChild(modal);
                    // Reload the page to show new QR code
                    setTimeout(() => window.location.reload(), 1000);
                  } else {
                    throw new Error(
                      data.message || "Failed to generate QR code"
                    );
                  }
                })
                .catch((error) => {
                  console.error("Error generating QR code:", error);
                  showToast("Error: " + error.message);
                  this.disabled = false;
                  this.innerHTML = "Generate QR Code";
                });
            });
        }

        function handleEditFormSubmit() {
          // Get form values
          const editShortId = document.getElementById('editShortId').value;
          const name = document.getElementById('editName').value;
          const redirectUrl = document.getElementById('editRedirectUrl').value;
          const expiresAt = document.getElementById('editExpiresAt').value || null;
          const isActive = document.getElementById('editIsActive').checked;
          
          // Build data object
          const data = {
            name,
            redirectUrl,
            isActive
          };
          
          if (expiresAt) {
            data.expiresAt = expiresAt;
          }
          
          // Get custom overlay data if enabled
          const overlayEnabled = document.getElementById('editCustomOverlayEnabled').checked;
          if (overlayEnabled) {
            const overlayText = document.getElementById('editOverlayText').value;
            const buttonText = document.getElementById('editButtonText').value;
            const buttonUrl = document.getElementById('editButtonUrl').value;
            const backgroundColor = document.getElementById('editBackgroundColor').value;
            const opacity = document.getElementById('editBackgroundOpacity').value / 100;
            const textColor = document.getElementById('editTextColor').value;
            const buttonColor = document.getElementById('editButtonColor').value;
            
            // Convert hex to rgba for background
            let bgColor;
            if (backgroundColor.startsWith('#')) {
              const r = parseInt(backgroundColor.substring(1, 3), 16);
              const g = parseInt(backgroundColor.substring(3, 5), 16);
              const b = parseInt(backgroundColor.substring(5, 7), 16);
              bgColor = `rgba(${r}, ${g}, ${b}, ${opacity})`;
            } else {
              bgColor = backgroundColor;
            }
            
            data.customOverlay = {
              enabled: true,
              text: overlayText,
              buttonText,
              buttonUrl,
              backgroundColor: bgColor,
              textColor,
              buttonColor
            };
          } else {
            data.customOverlay = { enabled: false };
          }
          
          // Show loading state
          const saveBtn = document.getElementById('editSubmitBtn');
          saveBtn.disabled = true;
          saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
          
          // Get CSRF token if available
          const csrfToken = document.querySelector('input[name="_csrf"]')?.value;
          
          // Prepare headers with CSRF token
          const headers = {
            'Content-Type': 'application/json'
          };
          
          // Add CSRF token to headers if available
          if (csrfToken) {
            headers['CSRF-Token'] = csrfToken;
          }
          
          // Send update request
          fetch(`/url/${editShortId}`, {
            method: 'PATCH',
            headers: headers,
            body: JSON.stringify(data)
          })
          .then(response => response.json())
          .then(result => {
            if (result.status === 'success') {
              showToast('URL updated successfully');
              closeModal('editModal');
              // Reload the page to show updated data
              location.reload();
            } else {
              throw new Error(result.message || 'Failed to update URL');
            }
          })
          .catch(error => {
            console.error('Error updating URL:', error);
            showToast(`Error: ${error.message}`);
            saveBtn.disabled = false;
            saveBtn.innerHTML = 'Save Changes';
          });
        }
      </script>

  </body>
</html>
